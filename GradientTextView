package com.xiaoniu.aidou.view;

import android.content.Context;
import android.graphics.Canvas;
import android.graphics.LinearGradient;
import android.graphics.Paint;
import android.graphics.RectF;
import android.graphics.Shader;
import android.text.TextPaint;
import android.util.AttributeSet;
import android.widget.TextView;

import androidx.annotation.Nullable;

/**
 * 带渐变边框的彩虹字，参阅 https://blog.csdn.net/gxp1182893781/article/details/78179248 及 http://blog.csdn.net/jack__frost/article/details/52279374
 * <p>
 * Created by liyujiang on 2018/7/9 18:24.
 */
public class GradientTextView extends TextView {

    /**
     * 默认边框颜色
     */
    private static final int[] DEFAULT_COLORS = {0xFFE64433, 0xFFFDB628};
    /**
     * 边框颜色
     */
    private int[] mBorderColors = DEFAULT_COLORS;
    /**
     * 边框宽度
     */
    private float mBorderWidth = 2f;
    /**
     * 圆角弧度
     */
    private float mBorderRadius = 10f;
    /**
     * 渐变
     */
    private LinearGradient mShader;
    /**
     * view大小
     */
    private int mViewWidth = 0;
    private int mViewHeight = 0;
    private RectF mRectF;


    public GradientTextView(Context context) {
        super(context);
    }

    public GradientTextView(Context context, @Nullable AttributeSet attrs) {
        super(context, attrs);
    }

    public GradientTextView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) {
        super(context, attrs, defStyleAttr);
    }

    /**
     * 设置属性
     *
     * @param width  线宽
     * @param radius 弧度
     */
    public void setBorder(float width, float radius) {
        setBorder(width, radius, DEFAULT_COLORS);
    }

    /**
     * 设置属性
     *
     * @param width  线宽
     * @param radius 弧度
     * @param colors 渐变颜色
     */
    public void setBorder(float width, float radius, int[] colors) {
        this.mBorderWidth = width;
        this.mBorderRadius = radius;
        this.mBorderColors = colors;
        initView();
        invalidate();
    }

    @Override
    protected void onSizeChanged(int w, int h, int oldw, int oldh) {
        super.onSizeChanged(w, h, oldw, oldh);
        if (w > 0) {
            initView();
        }
    }



    @Override
    protected void onDraw(Canvas canvas) {
        super.onDraw(canvas);
        //绘制渐变圆角边框
        if (mViewWidth > 0 && mBorderRadius > 0) {
            TextPaint paint = getPaint();
            paint.setStyle(Paint.Style.STROKE);
            paint.setStrokeWidth(dip2Px(mBorderWidth));
            paint.setAntiAlias(true);
            float radius = dip2Px(mBorderRadius);
            canvas.drawRoundRect(mRectF, radius, radius, paint);
        }
    }


    /**
     * 初始化view
     */
    private void initView() {
        mViewWidth = getWidth();
        mViewHeight = getHeight();
        float borderW = mBorderWidth;
        mRectF = new RectF(borderW, borderW, mViewWidth - borderW, mViewHeight - borderW);
        //初始渐变
        mShader = new LinearGradient(0, 0, mViewWidth, 0, mBorderColors, null, Shader.TileMode.MIRROR);
        //得到父类中写字的那支笔，并套上线性渲染器
        TextPaint paint = getPaint();
        //设置渐变背景
        paint.setShader(mShader);
    }

    /**
     * dp转px
     *
     * @param dip
     * @return
     */
    private float dip2Px(float dip) {
        float density = getResources().getDisplayMetrics().density;
        return dip * density + .5f;
    }

}
